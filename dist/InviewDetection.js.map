{"version":3,"file":"InviewDetection.js","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\tanimatedElements.forEach((element) => {\n\t\t\ttry {\n\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t}\n\n\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\tgsap.set(element, animationFromProperties)\n\t\t\t} catch (error) {\n\t\t\t\t// Catch and log any errors\n\t\t\t\tconsole.error('Error parsing JSON', error)\n\t\t\t}\n\t\t})\n\n\t\t// Create a ScrollTrigger instance for the parent element\n\t\tconst trigger = ScrollTrigger.create({\n\t\t\ttrigger: parent,\n\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\tonEnter: async () => {\n\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t},\n\t\t\tonEnterBack: async () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeave: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeaveBack: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\ttoggleClass: {\n\t\t\t\ttargets: parent,\n\t\t\t\tclassName: 'is-inview',\n\t\t\t},\n\t\t})\n\n\t\t// Store the ScrollTrigger instance\n\t\tthis.triggers.push(trigger)\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromProperties, animationToProperties, index)\n\t\t}\n\t}\n\n\tasync runAnimation(parent, animatedElements, animationToProperties) {\n\t\ttry {\n\t\t\tawait gsap.to(animatedElements, {\n\t\t\t\t...animationToProperties,\n\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\tstagger: {\n\t\t\t\t\teach: parent.dataset.inviewStagger || this.getOption('stagger'),\n\t\t\t\t\tfrom: 'start',\n\t\t\t\t},\n\t\t\t})\n\t\t\tparent.classList.add('has-viewed')\n\t\t} catch (error) {\n\t\t\tconsole.error('Error animating elements:', error)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","_extends","triggers","init","getOption","optionName","_proto","gsap","utils","toArray","forEach","parent","index","animatedElements","hasAttribute","_this","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","inviewFrom","JSON","parse","animateElements","error","console","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","_this2","splitElements","splitElementsParent","Array","from","filter","inviewSplit","selfToSplit","concat","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","Element","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this3","animationFromProperties","animationToProperties","inviewTo","set","ScrollTrigger","create","trigger","inviewStart","onEnter","Promise","resolve","runAnimation","then","onEnterBack","_temp","_this4","onLeave","onLeaveBack","markers","toggleClass","targets","className","debugMode","_this5","_temp2","body","recover","to","inviewDuration","inviewDelay","inviewEase","each","inviewStagger","classList","add","e","result","_catch","reject","group","log","groupEnd","refresh","stop","st","kill","killTweensOf","restart","InviewDetection"],"mappings":"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"}