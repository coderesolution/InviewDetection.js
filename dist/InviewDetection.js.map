{"version":3,"file":"InviewDetection.js","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.1,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.08,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tregisterGsap: false,\n\t\t\tinviewClass: 'is-inview',\n\t\t\tviewedClass: 'has-viewed'\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElements = []\n\n\t\t// Store event listeners\n\t\tthis.listeners = {}\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Preload if option is set\n\t\t\tif (this.getOption('registerGsap')) {\n\t\t\t\tthis.registerGsap()\n\t\t\t}\n\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to register event listeners\n\ton(eventName, listener) {\n\t\tif (!this.listeners[eventName]) {\n\t\t\tthis.listeners[eventName] = []\n\t\t}\n\t\tthis.listeners[eventName].push(listener)\n\t}\n\n\t// Function to emit events\n\temit(eventName, element) {\n\t\tconst eventListeners = this.listeners[eventName]\n\t\tif (eventListeners) {\n\t\t\teventListeners.forEach((listener) => {\n\t\t\t\tlistener(element)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Method to load GSAP and SplitText\n\tregisterGsap() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tgsap.registerPlugin(ScrollTrigger, SplitText)\n\t\t\t\tresolve()\n\t\t\t} catch (e) {\n\t\t\t\treject(e)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElements.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\tthis.animatedElements.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.animatedElements.push(line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.animatedElements.push(line)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set visibility to visible\n\t\t\t\t\tline.style.visibility = 'visible'\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\tlet timeline = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\n\t\t\t\t\t\tparent.classList.add(this.getOption('viewedClass'))\n\n\t\t\t\t\t\t// Check if the parent has the 'data-inview-call' attribute and, if so, dispatch a custom event with the attribute's value as the event name\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-call')) {\n\t\t\t\t\t\t\tconst customEventName = parent.getAttribute('data-inview-call')\n\t\t\t\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\t\t\ttarget: parent\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.listeners['onEnter']) {\n\t\t\t\t\t\t\tthis.emit('onEnter', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.listeners['onLeave']) {\n\t\t\t\t\t\t\tthis.emit('onLeave', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.listeners['onEnterBack']) {\n\t\t\t\t\t\t\tthis.emit('onEnterBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.listeners['onLeaveBack']) {\n\t\t\t\t\t\t\tthis.emit('onLeaveBack', parent)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: this.getOption('inviewClass'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElements.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tgsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromPropertiesArray, animationToPropertiesArray, index)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\n\t\tif (this.listeners['refresh']) {\n\t\t\tthis.emit('refresh', parent)\n\t\t}\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElements)\n\n\t\tallElements.forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\tif (this.listeners['stop']) {\n\t\t\tthis.emit('stop', parent)\n\t\t}\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\n\t\tif (this.listeners['restart']) {\n\t\t\tthis.emit('restart', parent)\n\t\t}\n\t}\n}\n"],"names":["options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","registerGsap","inviewClass","viewedClass","_extends","triggers","animatedElements","listeners","getOption","init","optionName","_proto","_this","gsap","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","inviewFrom","JSON","parse","animateElements","error","console","on","eventName","listener","emit","element","eventListeners","Promise","resolve","reject","registerPlugin","ScrollTrigger","SplitText","e","_this2","inviewScope","querySelectorAll","parseFloat","_this3","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","_this4","splitElements","splitElementsParent","Array","from","filter","inviewSplit","selfToSplit","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","_this5","Element","type","linesClass","lines","line","toFixed","style","visibility","sort","a","b","_a$order","_b$order","i","length","_this6","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","classList","customEventName","window","dispatchEvent","CustomEvent","detail","target","onLeave","restart","pause","onEnterBack","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","debugMode","group","log","groupEnd","refresh","stop","st","kill","concat","killTweensOf","InviewDetection"],"mappings":"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"}