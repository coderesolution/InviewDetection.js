{"version":3,"file":"InviewDetection.mjs","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 768px)',\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\tlet timeline = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: 'is-inview',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElements.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tgsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromPropertiesArray, animationToPropertiesArray, index)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["InviewDetection","options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","_extends","triggers","init","_proto","prototype","getOption","optionName","gsap","utils","toArray","forEach","parent","index","animatedElements","hasAttribute","_this","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","inviewFrom","JSON","parse","animateElements","error","console","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","_this2","splitElementsParent","Array","from","splitElements","filter","inviewSplit","selfToSplit","getSplitChildren","splitElement","node","addSplitElement","splitChildren","splitParent","Element","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this3","animationFromPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","e","Promise","reject","onEnterBack","restart","resolve","onLeave","pause","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewTo","animationToPropertiesArray","set","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","staggerTime","debugMode","group","log","groupEnd","refresh","ScrollTrigger","stop","st","kill","killTweensOf"],"mappings":"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"}