{"version":3,"file":"InviewDetection.mjs","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => this.addSplitElement(splitElement, animatedElements))\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t// Split the text of the splitElement into lines\n\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\ttype: 'lines',\n\t\t\t\tlinesClass: 'lineChild',\n\t\t\t})\n\n\t\t\t// For each line, add it to the animatedElements array\n\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\tif (order) {\n\t\t\t\t\torder += 0.01\n\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\tel: line,\n\t\t\t\t\t\torder: order,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\tel: line,\n\t\t\t\t\t\torder: false,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\ttry {\n\t\t\t// Check if the parent has custom animation properties defined in 'data-inviewFrom' and 'data-inviewTo'\n\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t}\n\n\t\t\tif (parent.dataset.inviewTo) {\n\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error parsing JSON', error)\n\t\t}\n\n\t\t// Set initial animation properties for the animated elements\n\t\tgsap.set(animatedElements, animationFromProperties)\n\n\t\t// Create a ScrollTrigger instance for the parent element\n\t\tconst trigger = ScrollTrigger.create({\n\t\t\ttrigger: parent,\n\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\tonEnter: async () => {\n\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t},\n\t\t\tonEnterBack: async () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeave: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeaveBack: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\ttoggleClass: {\n\t\t\t\ttargets: parent,\n\t\t\t\tclassName: 'is-inview',\n\t\t\t},\n\t\t})\n\n\t\t// Store the ScrollTrigger instance\n\t\tthis.triggers.push(trigger)\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromProperties, animationToProperties, index)\n\t\t}\n\t}\n\n\tasync runAnimation(parent, animatedElements, animationToProperties) {\n\t\ttry {\n\t\t\tawait gsap.to(animatedElements, {\n\t\t\t\t...animationToProperties,\n\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\tstagger: {\n\t\t\t\t\teach: parent.dataset.inviewStagger || this.getOption('stagger'),\n\t\t\t\t\tfrom: 'start',\n\t\t\t\t},\n\t\t\t})\n\t\t\tparent.classList.add('has-viewed')\n\t\t} catch (error) {\n\t\t\tconsole.error('Error animating elements:', error)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["InviewDetection","options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","_extends","triggers","init","getOption","optionName","_proto","gsap","utils","toArray","forEach","parent","index","hasAttribute","_this","addScopedElements","animatedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","animateElements","error","console","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","isNaN","value","_this2","splitElementsParent","Array","from","splitElements","filter","inviewSplit","selfToSplit","getSplitChildren","splitElement","addSplitElement","splitChildren","splitParent","concat","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this3","_this4","animationFromProperties","animationToProperties","inviewFrom","JSON","parse","inviewTo","set","trigger","ScrollTrigger","create","inviewStart","onEnter","Promise","resolve","runAnimation","then","onEnterBack","_temp","onLeave","onLeaveBack","markers","toggleClass","targets","className","debugMode","_temp2","body","recover","result","to","inviewDuration","_this5","inviewDelay","inviewEase","each","inviewStagger","classList","add","e","_catch","group","log","groupEnd","refresh","stop","st","kill","killTweensOf","restart"],"mappings":"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"}