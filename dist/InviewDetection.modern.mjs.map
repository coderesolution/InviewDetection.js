{"version":3,"file":"InviewDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => this.addSplitElement(splitElement, animatedElements))\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t// Split the text of the splitElement into lines\n\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\ttype: 'lines',\n\t\t\t\tlinesClass: 'lineChild',\n\t\t\t})\n\n\t\t\t// For each line, add it to the animatedElements array\n\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\tif (order) {\n\t\t\t\t\torder += 0.01\n\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\tel: line,\n\t\t\t\t\t\torder: order,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\tel: line,\n\t\t\t\t\t\torder: false,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\ttry {\n\t\t\t// Check if the parent has custom animation properties defined in 'data-inviewFrom' and 'data-inviewTo'\n\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t}\n\n\t\t\tif (parent.dataset.inviewTo) {\n\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error parsing JSON', error)\n\t\t}\n\n\t\t// Set initial animation properties for the animated elements\n\t\tgsap.set(animatedElements, animationFromProperties)\n\n\t\t// Create a ScrollTrigger instance for the parent element\n\t\tconst trigger = ScrollTrigger.create({\n\t\t\ttrigger: parent,\n\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\tonEnter: async () => {\n\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t},\n\t\t\tonEnterBack: async () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeave: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeaveBack: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\ttoggleClass: {\n\t\t\t\ttargets: parent,\n\t\t\t\tclassName: 'is-inview',\n\t\t\t},\n\t\t})\n\n\t\t// Store the ScrollTrigger instance\n\t\tthis.triggers.push(trigger)\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromProperties, animationToProperties, index)\n\t\t}\n\t}\n\n\tasync runAnimation(parent, animatedElements, animationToProperties) {\n\t\ttry {\n\t\t\tawait gsap.to(animatedElements, {\n\t\t\t\t...animationToProperties,\n\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\tstagger: {\n\t\t\t\t\teach: parent.dataset.inviewStagger || this.getOption('stagger'),\n\t\t\t\t\tfrom: 'start',\n\t\t\t\t},\n\t\t\t})\n\t\t\tparent.classList.add('has-viewed')\n\t\t} catch (error) {\n\t\t\tconsole.error('Error animating elements:', error)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["InviewDetection","constructor","options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","_extends","triggers","init","getOption","optionName","gsap","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","animatedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","animateElements","error","console","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","splitElements","Array","from","filter","inviewSplit","getSplitChildren","splitElementsParent","splitElement","addSplitElement","splitChildren","splitParent","SplitText","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this","animationFromProperties","inviewFrom","JSON","parse","inviewTo","animationToProperties","set","trigger","ScrollTrigger","create","inviewStart","onEnter","async","runAnimation","onEnterBack","onLeave","onLeaveBack","markers","toggleClass","targets","className","debugMode","to","inviewDuration","inviewDelay","inviewEase","each","inviewStagger","classList","add","group","log","groupEnd","refresh","stop","st","kill","killTweensOf","restart"],"mappings":"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"}