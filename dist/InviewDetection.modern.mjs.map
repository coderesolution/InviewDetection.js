{"version":3,"file":"InviewDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 768px)',\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\tlet timeline = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: 'is-inview',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElements.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tgsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromPropertiesArray, animationToPropertiesArray, index)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["constructor","options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","triggers","init","getOption","optionName","gsap","utils","toArray","forEach","parent","index","animatedElements","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","animationFromProperties","inviewFrom","JSON","parse","animateElements","error","console","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","splitElements","Array","from","filter","inviewSplit","getSplitChildren","splitElementsParent","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","Element","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","animationFromPropertiesArray","animationToPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","async","play","hasPlayed","onEnterBack","restart","onLeave","pause","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationToProperties","inviewTo","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","e","debugMode","group","log","groupEnd","refresh","ScrollTrigger","stop","st","kill","killTweensOf"],"mappings":"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"}