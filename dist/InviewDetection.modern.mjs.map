{"version":3,"file":"InviewDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\tanimatedElements.forEach((element) => {\n\t\t\ttry {\n\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t}\n\n\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\tgsap.set(element, animationFromProperties)\n\t\t\t} catch (error) {\n\t\t\t\t// Catch and log any errors\n\t\t\t\tconsole.error('Error parsing JSON', error)\n\t\t\t}\n\t\t})\n\n\t\t// Create a ScrollTrigger instance for the parent element\n\t\tconst trigger = ScrollTrigger.create({\n\t\t\ttrigger: parent,\n\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\tonEnter: async () => {\n\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t},\n\t\t\tonEnterBack: async () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t\tawait this.runAnimation(parent, animatedElements, animationToProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeave: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tonLeaveBack: () => {\n\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\tgsap.set(animatedElements, animationFromProperties)\n\t\t\t\t}\n\t\t\t},\n\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\ttoggleClass: {\n\t\t\t\ttargets: parent,\n\t\t\t\tclassName: 'is-inview',\n\t\t\t},\n\t\t})\n\n\t\t// Store the ScrollTrigger instance\n\t\tthis.triggers.push(trigger)\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromProperties, animationToProperties, index)\n\t\t}\n\t}\n\n\tasync runAnimation(parent, animatedElements, animationToProperties) {\n\t\ttry {\n\t\t\tawait gsap.to(animatedElements, {\n\t\t\t\t...animationToProperties,\n\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\tstagger: {\n\t\t\t\t\teach: parent.dataset.inviewStagger || this.getOption('stagger'),\n\t\t\t\t\tfrom: 'start',\n\t\t\t\t},\n\t\t\t})\n\t\t\tparent.classList.add('has-viewed')\n\t\t} catch (error) {\n\t\t\tconsole.error('Error animating elements:', error)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["InviewDetection","constructor","options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","_extends","triggers","init","getOption","optionName","gsap","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","animatedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","inviewFrom","animationFromProperties","JSON","parse","animateElements","error","console","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","splitElementsParent","Array","from","splitElements","filter","inviewSplit","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","SplitText","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this","animationToProperties","inviewTo","set","trigger","ScrollTrigger","create","inviewStart","onEnter","async","runAnimation","onEnterBack","onLeave","onLeaveBack","markers","toggleClass","targets","className","debugMode","to","inviewDuration","inviewDelay","inviewEase","each","inviewStagger","classList","add","group","log","groupEnd","refresh","stop","st","kill","killTweensOf","restart"],"mappings":"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"}