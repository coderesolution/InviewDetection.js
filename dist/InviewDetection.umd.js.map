{"version":3,"file":"InviewDetection.umd.js","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => this.addSplitElement(splitElement, animatedElements))\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t// Split the text of the splitElement into lines\n\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\ttype: 'lines',\n\t\t\t\tlinesClass: 'lineChild',\n\t\t\t})\n\n\t\t\t// For each line, add it to the animatedElements array\n\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\tif (order) {\n\t\t\t\t\torder += 0.01\n\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\tel: line,\n\t\t\t\t\t\torder: order,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\tel: line,\n\t\t\t\t\t\torder: false,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\ttry {\n\t\t\t// Check if the parent has custom animation properties defined in 'data-inviewFrom' and 'data-inviewTo'\n\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t}\n\n\t\t\tif (parent.dataset.inviewTo) {\n\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error parsing JSON', error)\n\t\t}\n\n\t\t// Set initial animation properties for the animated elements\n\t\tgsap.set(animatedElements, animationFromProperties)\n\n\t\t// Create a ScrollTrigger instance for the parent element\n\t\tconst trigger = ScrollTrigger.create({\n\t\t\ttrigger: parent,\n\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\tonEnter: () => {\n\t\t\t\t// Animate the elements when they enter the viewport\n\t\t\t\tgsap.to(animatedElements, {\n\t\t\t\t\t...animationToProperties,\n\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\tstagger: {\n\t\t\t\t\t\teach: parent.dataset.inviewStagger || this.getOption('stagger'),\n\t\t\t\t\t\tfrom: 'start',\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tparent.classList.add('has-viewed')\n\t\t\t},\n\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\ttoggleClass: {\n\t\t\t\ttargets: parent,\n\t\t\t\tclassName: 'is-inview',\n\t\t\t},\n\t\t})\n\n\t\t// Store the ScrollTrigger instance\n\t\tthis.triggers.push(trigger)\n\n\t\t/* Debug mode */\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromProperties, animationToProperties, index)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["InviewDetection","options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","_extends","triggers","init","getOption","optionName","_this","gsap","utils","toArray","forEach","parent","index","animatedElements","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","animateElements","error","console","_proto","inviewScope","querySelectorAll","element","parseFloat","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","_this2","splitElements","splitElementsParent","Array","from","filter","inviewSplit","selfToSplit","getSplitChildren","splitElement","addSplitElement","splitChildren","splitParent","concat","SplitText","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this3","inviewFrom","animationFromProperties","JSON","parse","inviewTo","animationToProperties","set","trigger","ScrollTrigger","create","inviewStart","onEnter","to","inviewDuration","inviewDelay","inviewEase","each","inviewStagger","classList","add","markers","toggleClass","targets","className","debugMode","group","log","groupEnd","refresh","stop","st","kill","killTweensOf","restart"],"mappings":"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"}