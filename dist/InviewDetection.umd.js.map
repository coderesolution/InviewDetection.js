{"version":3,"file":"InviewDetection.umd.js","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 768px)',\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElements = []\n\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElements.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\tthis.animatedElements.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.animatedElements.push(line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.animatedElements.push(line)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\tlet timeline = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: 'is-inview',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElements.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tgsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromPropertiesArray, animationToPropertiesArray, index)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElements)\n\n\t\tallElements.forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","triggers","animatedElements","init","_proto","InviewDetection","prototype","getOption","optionName","_this","gsap","utils","toArray","forEach","parent","index","hasAttribute","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","inviewFrom","JSON","parse","animateElements","error","console","_this2","inviewScope","querySelectorAll","element","parseFloat","_this3","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","_this4","splitElements","splitElementsParent","Array","from","filter","inviewSplit","selfToSplit","getSplitChildren","splitElement","NodeList","node","addSplitElement","splitChildren","splitParent","_this5","Element","type","linesClass","lines","line","toFixed","sort","a","b","_a$order","_b$order","i","length","_this6","animationFromPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","Promise","resolve","onEnterBack","restart","e","reject","onLeave","pause","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","animationToProperties","inviewTo","animationToPropertiesArray","set","staggerTime","inviewStagger","to","_extends","inviewDuration","inviewDelay","inviewEase","debugMode","group","log","groupEnd","refresh","ScrollTrigger","stop","st","kill","concat","killTweensOf"],"mappings":"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"}