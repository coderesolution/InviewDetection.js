{"version":3,"file":"InviewDetection.umd.js","sources":["../src/index.js"],"sourcesContent":["export default class InviewDetection {\n\tconstructor(options = {}) {\n\t\t// Define default options\n\t\tthis.defaultOptions = {\n\t\t\telements: '[data-inview]',\n\t\t\tduration: 1,\n\t\t\tdelay: 0.4,\n\t\t\tstart: 'top 90%',\n\t\t\tease: 'power4',\n\t\t\tstagger: 0.095,\n\t\t\tanimationFrom: {\n\t\t\t\topacity: 0,\n\t\t\t\t'will-change': 'transform',\n\t\t\t\ty: 20,\n\t\t\t},\n\t\t\tanimationTo: {\n\t\t\t\topacity: 1,\n\t\t\t\ty: 0,\n\t\t\t},\n\t\t\tscreen: '(min-width: 1025px)',\n\t\t\tautoStart: true,\n\t\t\tregisterGsap: false,\n\t\t}\n\n\t\t// Merge default options with provided options\n\t\tthis.options = { ...this.defaultOptions, ...options }\n\n\t\t// Store ScrollTrigger instances\n\t\tthis.triggers = []\n\n\t\t// Store all animated elements\n\t\tthis.animatedElements = []\n\n\t\t// Start by default if set\n\t\tif (this.getOption('autoStart')) {\n\t\t\tthis.init();\n\t\t}\n\t}\n\n\t// Function to get a specific option\n\tgetOption(optionName) {\n\t\treturn this.options[optionName]\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\ttry {\n\n\t\t\t// Preload if option is set\n\t\t\tif (this.getOption('registerGsap')) {\n\t\t\t\tthis.registerGsap();\n\t\t\t}\n\n\t\t\t// Convert elements to an array and loop through each\n\t\t\tgsap.utils.toArray(this.getOption('elements')).forEach((parent, index) => {\n\t\t\t\t// Define array to hold animated elements\n\t\t\t\tlet animatedElements = []\n\n\t\t\t\t// If the parent doesn't have 'data-inview-scope' attribute,\n\t\t\t\t// add it to the animated elements\n\t\t\t\t// Otherwise, add scoped, child, and split elements\n\t\t\t\tif (!parent.hasAttribute('data-inview-scope')) {\n\t\t\t\t\tanimatedElements.push({ el: parent, order: parent.dataset.inviewOrder })\n\t\t\t\t} else {\n\t\t\t\t\tthis.addScopedElements(parent, animatedElements)\n\t\t\t\t\tthis.addChildElements(parent, animatedElements)\n\t\t\t\t\tthis.addSplitElements(parent, animatedElements)\n\t\t\t\t}\n\n\t\t\t\t// Order the animated elements based on their 'order' property\n\t\t\t\tthis.orderAnimatedElements(animatedElements)\n\n\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\n\t\t\t\t// Check if the parent has custom animation properties defined in 'data-inview-from'\n\t\t\t\tif (parent.dataset.inviewFrom) {\n\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t}\n\n\t\t\t\t// Animate the elements\n\t\t\t\tthis.animateElements(parent, animatedElements, index)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error initialising InviewDetection:', error)\n\t\t}\n\t}\n\n\t// Method to load GSAP and SplitText\n\tregisterGsap() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tgsap.registerPlugin(ScrollTrigger, SplitText);\n\t\t\t\tresolve();\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Function to add scoped elements to the animatedElements array\n\taddScopedElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// If the parent has 'data-inview-scope' attribute,\n\t\t\t// add all elements defined in this attribute to the animatedElements array\n\t\t\tif (parent.dataset.inviewScope) {\n\t\t\t\tparent.querySelectorAll(':scope ' + parent.dataset.inviewScope).forEach((element) => {\n\t\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\t\tthis.animatedElements.push(element)\n\t\t\t\t})\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding scoped elements:', error)\n\t\t}\n\t}\n\n\t// Function to add child elements to the animatedElements array\n\taddChildElements(parent, animatedElements) {\n\t\ttry {\n\t\t\t// Add all elements with 'data-inview-child' attribute to the animatedElements array\n\t\t\tparent.querySelectorAll(':scope [data-inview-child]').forEach((element) => {\n\t\t\t\tconst order = parseFloat(element.dataset.inviewOrder)\n\t\t\t\tanimatedElements.push({ el: element, order: order })\n\t\t\t\tthis.animatedElements.push(element)\n\t\t\t})\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error adding child elements:', error)\n\t\t}\n\t}\n\n\t// Function to find the closest parent with 'data-inview-order' attribute\n\tfindClosestParentOrderAttr(element) {\n\t\tlet parent = element.parentElement\n\t\tlet ancestorsIndexed = 0\n\t\tlet ancestorsLimit = 5\n\t\t// Iterate through parent elements up to ancestorsLimit\n\t\twhile (parent && ancestorsIndexed <= ancestorsLimit) {\n\t\t\tif (parent.hasAttribute('data-inview-order')) {\n\t\t\t\treturn parseFloat(parent.getAttribute('data-inview-order'))\n\t\t\t}\n\t\t\tparent = parent.parentElement\n\t\t\tancestorsIndexed++\n\t\t}\n\t\tif (element.hasAttribute('data-inview-order')) {\n\t\t\tconst value = element.getAttribute('data-inview-order')\n\t\t\treturn isNaN(+value) ? false : +value\n\t\t}\n\t\treturn false\n\t}\n\n\t// Function to add split elements to the animatedElements array\n\taddSplitElements(parent, animatedElements) {\n\t\tconst splitElements = parent.querySelectorAll(':scope *:where([data-inview-split])')\n\t\tconst splitElementsParent = Array.from(splitElements).filter((element) => element.dataset.inviewSplit)\n\t\tconst selfToSplit = Array.from(splitElements).filter((element) => !element.dataset.inviewSplit)\n\n\t\tlet elementsToSplit = [...selfToSplit, ...this.getSplitChildren(splitElementsParent)]\n\n\t\t// For each element to split, add it to the animatedElements array\n\t\telementsToSplit.forEach((splitElement) => {\n\t\t\t// If splitElement is a NodeList, handle each Node individually\n\t\t\tif (splitElement instanceof NodeList) {\n\t\t\t\tsplitElement.forEach((node) => this.addSplitElement(node, animatedElements))\n\t\t\t} else {\n\t\t\t\tthis.addSplitElement(splitElement, animatedElements)\n\t\t\t}\n\t\t})\n\t}\n\n\t// Function to get split children\n\tgetSplitChildren(splitElementsParent) {\n\t\tlet splitChildren = []\n\n\t\t// For each split parent, add its children to splitChildren array\n\t\tsplitElementsParent.forEach((splitParent) => {\n\t\t\tsplitChildren = [\n\t\t\t\t...splitChildren,\n\t\t\t\t...splitParent.querySelectorAll(':scope ' + splitParent.dataset.inviewSplit),\n\t\t\t]\n\t\t})\n\n\t\treturn splitChildren\n\t}\n\n\t// Function to add a split element to the animatedElements array\n\taddSplitElement(splitElement, animatedElements) {\n\t\ttry {\n\t\t\t// Check if splitElement is a DOM element\n\t\t\tif (splitElement instanceof Element) {\n\t\t\t\t// Find the closest parent with 'data-inview-order' attribute\n\t\t\t\tlet order = this.findClosestParentOrderAttr(splitElement)\n\n\t\t\t\t// Split the text of the splitElement into lines\n\t\t\t\tconst splitChildren = new SplitText(splitElement, {\n\t\t\t\t\ttype: 'lines',\n\t\t\t\t\tlinesClass: 'lineChild',\n\t\t\t\t})\n\n\t\t\t\t// For each line, add it to the animatedElements array\n\t\t\t\tsplitChildren.lines.forEach((line) => {\n\t\t\t\t\tif (order) {\n\t\t\t\t\t\torder += 0.01\n\t\t\t\t\t\tline.dataset.inviewOrder = order.toFixed(2)\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: order,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.animatedElements.push(line)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tanimatedElements.push({\n\t\t\t\t\t\t\tel: line,\n\t\t\t\t\t\t\torder: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t\tthis.animatedElements.push(line)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set visibility to visible\n\t\t\t\t\tline.style.visibility = 'visible';\n\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Log an error if splitElement is not a DOM element\n\t\t\t\tconsole.error('splitElement is not a DOM element:', splitElement)\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch and log any errors\n\t\t\tconsole.error('Error splitting element:', error)\n\t\t}\n\t}\n\n\t// Function to order animated elements based on their 'order' property\n\torderAnimatedElements(animatedElements) {\n\t\tanimatedElements.sort((a, b) => {\n\t\t\treturn (a['order'] ?? 1) - (b['order'] ?? -1)\n\t\t})\n\n\t\t// Replace each animatedElement object with its corresponding element\n\t\tfor (let i = 0; i < animatedElements.length; i++) {\n\t\t\tanimatedElements[i] = animatedElements[i].el\n\t\t}\n\t}\n\n\t// Function to animate the elements\n\tanimateElements(parent, animatedElements, index) {\n\t\t// Initialise animation property arrays\n\t\tlet animationFromPropertiesArray = []\n\t\tlet animationToPropertiesArray = []\n\n\t\t// Create a matchMedia instance\n\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t// Get the screen media query\n\t\tconst screen = parent.dataset.inviewScreen || this.getOption('screen')\n\n\t\t// Initialise a new gsap timeline\n\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\tlet timeline = gsap.timeline({\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: parent,\n\t\t\t\t\tstart: parent.dataset.inviewStart || this.getOption('start'),\n\t\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\t\tonEnter: async () => {\n\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t},\n\t\t\t\t\tonEnterBack: async () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t} else if (!timeline.hasPlayed) {\n\t\t\t\t\t\t\ttimeline.play()\n\t\t\t\t\t\t\ttimeline.hasPlayed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeave: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\t\tif (parent.hasAttribute('data-inview-repeat')) {\n\t\t\t\t\t\t\ttimeline.restart().pause()\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmarkers: parent.hasAttribute('data-inview-debug') ? true : false,\n\t\t\t\t\ttoggleClass: {\n\t\t\t\t\t\ttargets: parent,\n\t\t\t\t\t\tclassName: 'is-inview',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\ttimeline.hasPlayed = false\n\n\t\t\t// Initialise a variable to hold the current time position on the timeline\n\t\t\tlet currentTime = 0\n\n\t\t\tanimatedElements.forEach((element) => {\n\t\t\t\ttry {\n\t\t\t\t\tlet animationFromProperties = this.getOption('animationFrom')\n\t\t\t\t\tlet animationToProperties = this.getOption('animationTo')\n\n\t\t\t\t\t// Check if the element has custom animation properties defined in 'data-inview-from' and 'data-inview-to'\n\t\t\t\t\tif (element.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(element.dataset.inviewFrom)\n\t\t\t\t\t} else if (parent.dataset.inviewFrom) {\n\t\t\t\t\t\tanimationFromProperties = JSON.parse(parent.dataset.inviewFrom)\n\t\t\t\t\t}\n\n\t\t\t\t\tif (element.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(element.dataset.inviewTo)\n\t\t\t\t\t} else if (parent.dataset.inviewTo) {\n\t\t\t\t\t\tanimationToProperties = JSON.parse(parent.dataset.inviewTo)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Push the properties for this element to the arrays\n\t\t\t\t\tanimationFromPropertiesArray.push(animationFromProperties)\n\t\t\t\t\tanimationToPropertiesArray.push(animationToProperties)\n\n\t\t\t\t\t// Set initial animation properties for the animated elements\n\t\t\t\t\tgsap.set(element, animationFromProperties)\n\n\t\t\t\t\t// Get the stagger time\n\t\t\t\t\tlet staggerTime = parent.dataset.inviewStagger || this.getOption('stagger')\n\n\t\t\t\t\t// Add the animation to the timeline\n\t\t\t\t\ttimeline.to(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...animationToProperties,\n\t\t\t\t\t\t\tduration: parent.dataset.inviewDuration || this.getOption('duration'),\n\t\t\t\t\t\t\tdelay: parent.dataset.inviewDelay || this.getOption('delay'),\n\t\t\t\t\t\t\tease: parent.dataset.inviewEase || this.getOption('ease'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcurrentTime\n\t\t\t\t\t)\n\n\t\t\t\t\t// Increase the current time position by the stagger time for the next animation\n\t\t\t\t\tcurrentTime += parseFloat(staggerTime)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(`An error occurred while animating the element: ${e}`)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Pause the timeline initially, the onEnter/onEnterBack events will play/restart it\n\t\t\ttimeline.pause()\n\t\t})\n\n\t\t// Debug mode\n\t\tif (parent.hasAttribute('data-inview-debug')) {\n\t\t\tthis.debugMode(parent, animatedElements, animationFromPropertiesArray, animationToPropertiesArray, index)\n\t\t}\n\t}\n\n\t// Function for debug mode logging\n\tdebugMode(parent, animatedElements, animationFromProperties, animationToProperties, index) {\n\t\tconsole.group(`InviewDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\tparent: parent,\n\t\t\telements: animatedElements,\n\t\t\tscreen: this.getOption('screen'),\n\t\t\tanimationFrom: animationFromProperties,\n\t\t\tanimationTo: animationToProperties,\n\t\t\tduration: this.getOption('duration'),\n\t\t\tdelay: this.getOption('delay'),\n\t\t\tstart: this.getOption('start'),\n\t\t\tease: this.getOption('ease'),\n\t\t\tstagger: this.getOption('stagger'),\n\t\t})\n\t\tconsole.groupEnd()\n\t}\n\n\t// Function to refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Function to stop the animations and ScrollTrigger instances\n\tstop() {\n\t\t// Kill ScrollTrigger instances created in this script\n\t\tthis.triggers.forEach((st) => st.kill())\n\n\t\t// Kill all animations\n\t\tconst allElements = gsap.utils.toArray(this.getOption('elements')).concat(this.animatedElements)\n\n\t\tallElements.forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\t}\n\n\t// Function to restart the animations and reinitialise everything\n\trestart() {\n\t\t// Kill all GSAP animations of the elements\n\t\tgsap.utils.toArray(this.getOption('elements')).forEach((element) => {\n\t\t\tgsap.killTweensOf(element)\n\t\t})\n\n\t\t// Reinitialise everything\n\t\tthis.init()\n\t}\n}\n"],"names":["options","this","defaultOptions","elements","duration","delay","start","ease","stagger","animationFrom","opacity","y","animationTo","screen","autoStart","registerGsap","triggers","animatedElements","getOption","init","optionName","_proto","gsap","utils","toArray","forEach","parent","index","hasAttribute","_this","addScopedElements","addChildElements","addSplitElements","push","el","order","dataset","inviewOrder","orderAnimatedElements","inviewFrom","JSON","parse","animateElements","error","console","Promise","resolve","reject","registerPlugin","ScrollTrigger","SplitText","e","_this2","inviewScope","querySelectorAll","element","parseFloat","_this3","findClosestParentOrderAttr","parentElement","ancestorsIndexed","getAttribute","value","isNaN","splitElements","splitElementsParent","Array","from","filter","inviewSplit","concat","selfToSplit","getSplitChildren","splitElement","NodeList","node","_this4","addSplitElement","splitParent","splitChildren","_this5","Element","type","linesClass","lines","line","toFixed","style","visibility","sort","a","b","_a$order","_b$order","i","length","_this6","animationFromPropertiesArray","matchMedia","inviewScreen","add","timeline","scrollTrigger","trigger","inviewStart","invalidateOnRefresh","onEnter","play","hasPlayed","onEnterBack","restart","onLeave","pause","onLeaveBack","markers","toggleClass","targets","className","currentTime","animationFromProperties","inviewTo","animationToProperties","animationToPropertiesArray","set","staggerTime","inviewStagger","to","inviewDuration","inviewDelay","inviewEase","debugMode","group","log","groupEnd","refresh","stop","st","kill","killTweensOf","InviewDetection"],"mappings":"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"}